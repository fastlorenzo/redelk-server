---
- name: restart elasticsearch
  become: yes
  service:
    name: elasticsearch
    state: restarted
    enabled: yes
  tags:
    - services

- name: restart filebeat
  become: yes
  service:
    name: filebeat
    state: restarted
    enabled: yes
  tags:
    - services

- name: restart kibana
  become: yes
  service:
    name: kibana
    state: restarted
    enabled: yes
  tags:
    - services

- name: restart logstash
  become: yes
  service:
    name: logstash
    state: restarted
    enabled: yes
  tags:
    - services

- name: restart nginx
  become: yes
  service:
    name: nginx
    state: restarted
    enabled: yes
  tags:
    - services

- name: restart autossh services
  become: yes
  systemd:
    name: "autossh-tunnel-{{ item }}"
    state: restarted
    enabled: yes
    daemon_reload: yes
  with_items:
    - "{{ hostvars.values()|list|json_query(\"[?type=='redirector'].ansible_hostname\") }}"
    - "{{ hostvars.values()|list|json_query(\"[?type=='c2'].ansible_hostname\") }}"
  tags:
    - ssh
    - service

- name: setup filebeat dashboards
  become: yes
  shell: >-
    /usr/bin/filebeat setup
    --index-management
    -E output.logstash.enabled=false
    -E 'output.elasticsearch.hosts=["https://localhost:9200"]'
    -E 'output.elasticsearch.ssl.certificate_authorities=["/etc/filebeat/redelkCA.crt"]'
    -E 'setup.ilm.enabled=true'
    -E 'output.elasticsearch.username=elastic'
    -E 'output.elasticsearch.password={{ es_elastic_password }}'
    --pipelines
    --modules system,nginx,mysql,apache,iptables,auditd,elasticsearch,kibana,logstash,haproxy
    --dashboards
  tags:
    - beats-setup

- name: convert logstash key to pkcs8
  become: yes
  args:
    chdir: "/etc/logstash"
  command: "openssl pkcs8 -in /etc/logstash/{{ ansible_hostname }}.key -topk8 -nocrypt -out /etc/logstash/{{ ansible_hostname }}.pkcs8.key"

- name: convert redelk ca to pem
  become: yes
  args:
    chdir: "{{ optsec_dir }}/certs"
  command: >-
    openssl pkcs12
    -in {{ optsec_dir }}/certs/redelkCA.p12
    -out {{ optsec_dir }}/certs/redelkCA.crt
    -nokeys -nodes -clcerts -passin 'pass:{{ redelk_ca_password }}'

- name: convert redelk certificates to pem
  become: yes
  args:
    chdir: "{{ optsec_dir }}/certs"
  command: >-
    openssl pkcs12
    -in {{ optsec_dir }}/certs/{{ item.item.item }}.p12
    -out {{ optsec_dir }}/certs/{{ item.item.item }}.crt
    -nokeys -nodes -clcerts -passin 'pass:{{ redelk_ca_password }}'
  loop: "{{ redelkcertsgen.results }}"
  loop_control:
    label: "{{ item.item.item }}"
  when: item.changed

- name: convert redelk private keys to pem
  become: yes
  args:
    chdir: "{{ optsec_dir }}/certs"
  command: >-
    openssl pkcs12
    -in {{ optsec_dir }}/certs/{{ item.item.item }}.p12
    -out {{ optsec_dir }}/certs/{{ item.item.item }}.key
    -nocerts -nodes -passin 'pass:{{ redelk_ca_password }}'
  loop: "{{ redelkcertsgen.results }}"
  loop_control:
    label: "{{ item.item.item }}"
  when: item.changed

- name: fetch redelk certificates
  become: yes
  synchronize:
    src: /opt/certs/
    dest: "{{ redelk_cert_path }}/"
    mode: pull
    use_ssh_args: yes

- name: update-ca-certificates
  become: yes
  command: "update-ca-certificates"
