---
# 1. clone RedELK repo
# 2. prepare steps from init script
# 3. prepare stesp from elkserver setup
# 4. deploy using docker-compose
- name: Checkout RedELK git repo (localhost)
  git:
    repo: 'https://github.com/{{ redelk_repo }}/RedELK.git'
    dest: "{{ redelk_repo_path }}"
    version: "{{ redelk_version }}"
  ignore_errors: yes
  delegate_to: localhost

- name: Creating RedELK working directory
  become: yes
  file:
    path: "{{ optsec_dir }}/{{ redelk_user }}/mounts/{{ item }}"
    state: directory
    mode: 0755
  with_items:
    - certs
    - jupyter-workbooks
    - logstash-config
    - nginx-config
    - redelk-config/etc/cron.d
    - redelk-config/etc/redelk
    - redelk-logs
    - redelk-ssh
    - redelk-www

# jupyter
- name: Copying Jupyter workbooks from RedELK repository
  become: yes
  copy:
    src: "{{ item }}"
    dest: "{{ optsec_dir }}/{{ redelk_user }}/mounts/jupyter-workbooks/{{ item | basename }}"
  with_fileglob:
    - "{{ redelk_repo_path }}/elkserver/mounts/jupyter-workbooks/*"

# logstash
# - name: Copying logstash config files from RedELK repository
#   become: yes
#   copy:
#     src: "{{ item }}"
#     dest: "{{ optsec_dir }}/{{ redelk_user }}/mounts/logstash-config/{{ item | basename }}"
#   with_fileglob:
#     - "{{ redelk_repo_path }}/elkserver/docker/redelk-logstash/redelkinstalldata/redelk-main/conf.d/*"
- name: Copying logstash config files from RedELK repository
  become: yes
  synchronize:
    src: "{{ redelk_repo_path }}/elkserver/mounts/logstash-config/"
    dest: "{{ optsec_dir }}/{{ redelk_user }}/mounts/logstash-config/"
    mode: push
    use_ssh_args: yes
- name: Copying Logstash beats output config
  become: yes
  copy:
    src: "98-outputs-beats_logstash.conf"
    dest: "{{ optsec_dir }}/{{ redelk_user }}/mounts/logstash-config/redelk-main/conf.d/98-outputs-beats_logstash.conf"
  when: monitor_hosts

# nginx
- name: Copying nginx config file
  become: yes
  template:
    src: nginx-config/default.conf.j2
    dest: "{{ optsec_dir }}/{{ redelk_user }}/mounts/nginx-config/default.conf.template"
  tags:
    - nginx
- name: Copying ssl-dhparams.pem config file from RedELK repository
  become: yes
  copy:
    src: "{{ redelk_repo_path }}/elkserver/mounts/nginx-config/ssl-dhparams.pem.template"
    dest: "{{ optsec_dir }}/{{ redelk_user }}/mounts/nginx-config/ssl-dhparams.pem.template"
  tags:
    - nginx
- name: Create Nginx htpasswd file ({{ es_redelk_user }})
  become: yes
  htpasswd:
    path: "{{ optsec_dir }}/{{ redelk_user }}/mounts/nginx-config/htpasswd.users.template"
    name: "{{ es_redelk_user }}"
    password: "{{ es_redelk_password }}"
    owner: 0
    group: 101
    mode: 0640
  tags:
    - nginx
- name: Create Nginx htpasswd file (elastic)
  become: yes
  htpasswd:
    path: "{{ optsec_dir }}/{{ redelk_user }}/mounts/nginx-config/htpasswd.users.template"
    name: elastic
    password: "{{ es_elastic_password }}"
    owner: 0
    group: 101
    mode: 0640
  tags:
    - nginx

# cron
- name: Copying RedELK cron file
  become: yes
  template:
    src: redelk-config/etc/cron.d/redelk.j2
    dest: "{{ optsec_dir }}/{{ redelk_user }}/mounts/redelk-config/etc/cron.d/redelk"
  tags:
    - cron

# RedELK config files
- name: Copying RedELK config files
  become: yes
  template:
    src: "{{ item }}"
    dest: "{{ optsec_dir }}/{{ redelk_user }}/mounts/redelk-config/etc/redelk/{{ item | basename | regex_replace('.j2','') }}"
  with_fileglob:
    - ../templates/redelk-config/etc/redelk/*.j2

# Docker-compose
- name: Copying docker-compose from RedELK repository
  become: yes
  copy:
    src: "{{ redelk_repo_path }}/elkserver/redelk-{{ redelk_install_type }}.yml"
    dest: "{{ optsec_dir }}/{{ redelk_user }}/redelk-{{ redelk_install_type }}.yml"
  tags:
    - docker
- name: Generating docker-compose .env file
  become: yes
  template:
    src: docker-env.j2
    dest: "{{ optsec_dir }}/{{ redelk_user }}/.env"
    mode: 0640
  tags:
    - docker

# When monitor_hosts == true
- name: Update docker-compose to monitor hosts (mount pipelines.yml)
  replace:
    path: "{{ optsec_dir }}/{{ redelk_user }}/redelk-{{ redelk_install_type }}.yml"
    regexp: '\#- \.\/mounts\/logstash-config\/config\/pipelines\.yml\:\/usr\/share\/logstash\/config\/pipelines\.yml'
    replace: '- {{ optsec_dir }}/{{ redelk_user }}/mounts/logstash-config/config/pipelines.yml:/usr/share/logstash/config/pipelines.yml'
  when: monitor_hosts
  tags:
    - docker

- name: Update docker-compose to monitor hosts (mount conf.d)
  replace:
    path: "{{ optsec_dir }}/{{ redelk_user }}/redelk-{{ redelk_install_type }}.yml"
    regexp: '\#- \.\/mounts\/logstash-config\/redelk-main\:\/usr\/share\/logstash\/redelk-main'
    replace: '- {{ optsec_dir }}/{{ redelk_user }}/mounts/logstash-config/redelk-main:/usr/share/logstash/redelk-main'
  when: monitor_hosts
  tags:
    - docker

# init-letsencrypt.sh
- name: Copying init-letsencrypt.sh from RedELK repository
  become: yes
  copy:
    src: "{{ redelk_repo_path }}/elkserver/init-letsencrypt.sh"
    dest: "{{ optsec_dir }}/{{ redelk_user }}/init-letsencrypt.sh"
    mode: 0755
    owner: "{{ redelk_user }}"
    group: root
  notify: run init-letsencrypt.sh
  tags:
    - pki
    - docker

- name: Force run init-letsencrypt.sh if needed
  meta: flush_handlers
  tags:
    - pki
    - docker

- name: Run `docker-compose up` again
  become: yes
  docker_compose:
    project_src: "{{ optsec_dir }}/{{ redelk_user }}"
    files: "redelk-{{ redelk_install_type }}.yml"
    build: no
  register: output
  tags:
    - pki
    - docker

# redelk-logstash.pkcs8.key should be the latest cert to be generated from by the docker container
- name: Wait until RedELK certificates are generated
  wait_for:
    path: "{{ optsec_dir }}/{{ redelk_user }}/mounts/certs/redelk-logstash/redelk-logstash.pkcs8.key"
    state: present
  tags:
    - pki

- name: Ensure local certificates directory exists
  become: yes
  file:
    path: "{{ redelk_cert_path }}"
    state: directory
    mode: 0750
    owner: root
    group: root
  delegate_to: localhost

- name: Fetch redelk certificates
  become: yes
  synchronize:
    src: "{{ optsec_dir }}/{{ redelk_user }}/mounts/certs/"
    dest: "{{ redelk_cert_path }}/"
    mode: pull
    use_ssh_args: yes
  tags:
    - pki
