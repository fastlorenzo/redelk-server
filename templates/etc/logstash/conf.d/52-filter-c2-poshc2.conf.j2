# Part of RedELK
#
# In this file we configure the logstash filters for PoshC2 logs
#
# Author: Outflank B.V. / Marc Smeets / @benpturner - Ben Turner
# Contributor: Lorenzo Bernardi
#

filter {
  if [infra][log][type] == "rtops" and [c2][program] == "poshc2" {

    if [c2][log][type] == "events" {

      # Let's first trim the syslog-like info from the log line
      grok {
        match => { "message" => [ ".*" ] }
      }

      # matching lines like: *** initial implant
      if "PID:" in [message] and "Sleep:" in [message] {

        mutate {
          replace  => { "[c2][log][type]" => "implant_newimplant" }
        }

        grok {
          match => { "message" => "%{IPORHOST:[host][ext_ip]}\:%{IPORHOST:[host][port]}\s+\|\s+Time:%{GREEDYDATA:[c2][timestamp]}\s+\|\s+PID:%{IPORHOST:[process][pid]}\s+\|\s+Sleep:%{GREEDYDATA:[implant][sleep]}\s+\|\s+%{GREEDYDATA:[user][name]}\s+@\s+%{GREEDYDATA:[host][name]}\s+\(%{GREEDYDATA:[implant][arch]}\)\s+\|\s+URL\:%{GREEDYDATA:[implant][url]}" }
        }

        if [host][ext_ip] {
          # duplicate field so we can replace it with reverse DNS lookup and add the external IP to [host][ip]
          mutate {
            add_field => { "[host][ext_domain]" => "%{[host][ext_ip]}" }
            copy => { "[host][ext_ip]" => "[host][ip]" }
          }
          # do reverse DNS lookup
          dns {
            reverse => ["[host][ext_domain]"]
            action => "replace"
            timeout => "2.0"
          }
          # add geo ip info from City DB
          geoip {
            source => "[host][ext_ip]"
            target => "tmpgeoip"
          }
          # add geo ip info from ASN DB
          geoip {
            source => "[host][ext_ip]"
            target => "tmpgeoip"
            default_database_type => "ASN"
            database => "/usr/share/elasticsearch/modules/ingest-geoip/GeoLite2-ASN.mmdb"
          }
          mutate {
            copy => {
              "[tmpgeoip][as_org]" => "[host][geo][as][organization][name]"
              "[tmpgeoip][asn]" => "[host][geo][as][organization][number]"
              "[tmpgeoip][city_name]" => "[host][geo][city_name]"
              "[tmpgeoip][country_code2]" => "[host][geo][country_iso_code]"
              "[tmpgeoip][location]" => "[host][geo][location]"
              "[tmpgeoip][region_code]" => "[host][geo][region_iso_code]"
              "[tmpgeoip][region_name]" => "[host][geo][region_name]"
            }
            remove_field => [ "tmpgeoip" ]
          }
        }

        date {
          match => [ "[c2][timestamp]", "dd/MM/YYYY HH:mm:ss" ]
          target => "@timestamp"
          timezone => "Etc/UTC"
        }

        clone {
          clones => [ "implantsdb" ]
          remove_field => [ "[c2][log][type]","message","[infra][log_type]" ]
        }

      }

      # matching lines like: *** Screenshot captured:
      if "Screenshot captured:" in [message] {

        mutate {
          replace  => { "[c2][log][type]" => "screenshots" }
        }

        grok {
          # Screenshot.full expects and URL, if the full screenshot is saved then the index needs to be updated to accomodate it
          match => { "message" => "Screenshot\s+captured:\s+%{GREEDYDATA:[screenshot][full]}" }
        }

      }

      # matching lines like: *** Download:
      if "Download file" in [message] {

        mutate {
          replace  => { "[c2][log][type]" => "downloads" }
        }

        grok {
          match => { "message" => "Download\s+file\s+part\s+%{GREEDYDATA:[file][path]}" }
        }

      }

      # matching lines like: *** Messages:
      if "Message from" in [message] or "logged off" in [message] or "logged on" in [message] {

        mutate {
          replace  => { "[c2][log][type]" => "messages" }
        }

        grok {
          match => { "message" => "(0[1-9]|[12]\d|3[01])/(0[1-9]|1[0-2])/[12]\d{3}\s+([0-1][0-9]|[2][0-3]):([0-5][0-9]):([0-5][0-9]):%{GREEDYDATA:[c2][message]}" }
        }

      }

    }
  }
}
