# Part of RedELK
#
# In this file we configure the logstash filtes for CobaltStrike teamserver logs
#
# Author: Outflank B.V. / Marc Smeets
# Contributor: Lorenzo Bernardi
#

filter {
  if [infra][log][type] == "rtops" and [c2][program] == "cobaltstrike" {

    # since ECS host.name is filled automatically. In case of C2 server logs it should contain the same value as agent.name. Here we check and drop host.name
    if [agent][name] == [host][name] {
      mutate {
        remove_field => [ "[host][name]" ]
      }
    }

    if [c2][log][type] == "events" {
      # Get the timestamp from the log line, and get the rest of the log line
      # Since CS version 3.14 the logging changed to include the UTC keyword
      if " UTC " not in [message] {  # check for legacy CS version, will be removed in the future
        grok {
          match => { "message" => "(?<[c2][timestamp]>%{MONTHNUM}\/%{MONTHDAY} %{HOUR}\:%{MINUTE}) %{GREEDYDATA:[c2][message]}" }
        }
        # Set the timestamp from the log to @timestamp
        date {
          match => [ "[c2][timestamp]", "MM/dd HH:mm" ]
          target => "@timestamp"
          timezone => "Etc/UTC"
        }
      } else {  # check for newer version of CS, contains "UTC" in time logging lines
        grok {
          match => { "message" => "(?<[c2][timestamp]>%{MONTHNUM}\/%{MONTHDAY} %{HOUR}\:%{MINUTE}\:%{SECOND}) UTC %{GREEDYDATA:[c2][message]}" }
        }
        # Set the timestamp from the log to @timestamp
        date {
          match => [ "[c2][timestamp]", "MM/dd HH:mm:ss" ]
          target => "@timestamp"
          timezone => "Etc/UTC"
        }
      } # end of legacy CS version check


      # matching lines like: *** initial beacon from username@ip (hostname)
      if " initial beacon from " in [c2][message] {
        mutate {
          replace  => { "[c2][log][type]" => "events_newimplant" }
        }

        grok {
          match => { "[c2][message]" => "((/*** initial beacon from)) (?<[user][name]>([^@]*))\@%{IPORHOST:[host][ip_int]} \((?<[host][name]>([^)]*))" }
        }
      }

      # matching lines like: *** user joined
      if " joined" in [c2][message] or " quit" in [c2][message] {
        mutate {
          replace  => { "[c2][log][type]" => "events_joinleave" }
        }
      }
    }

    if [c2][log][type] == "beacon" {
      # Get the timestamp from the log line, and get the rest of the log line
      # Since CS version 3.14 the logging changed to include the UTC keyword
      if " UTC " not in [message] {  # check for legacy CS version, will be removed in the future
        grok {
          match => { "message" => "(?<[c2][timestamp]>%{MONTHNUM}\/%{MONTHDAY} %{TIME}) %{GREEDYDATA:[c2][message]}" }
        }
        # Set the timestamp from the log to @timestamp
        date {
          match => [ "[c2][timestamp]", "MM/dd HH:mm" ]
          target => "@timestamp"
          timezone => "Etc/UTC"
        }
      } else {  # check for newer version of CS, contains "UTC" in time logging lines
        grok {
          match => { "message" => "(?<[c2][timestamp]>%{MONTHNUM}\/%{MONTHDAY} %{TIME}) UTC %{GREEDYDATA:[c2][message]}" }
        }
        # Set the timestamp from the log to @timestamp
        date {
          match => [ "[c2][timestamp]", "MM/dd HH:mm:ss" ]
          target => "@timestamp"
          timezone => "Etc/UTC"
        }
      } # end of legacy CS version check

      # Add path/URI value to the full beacon.log file
      ruby {
        path => "/etc/logstash/ruby-scripts/cs_makebeaconlogpath.rb"
      }

      # Set the beacon id from the file name
      # Need to match for 3 different occurence:
      #  - one where it states 'unknown'.
      #  - where the IP address is known based on the file name with beacon_*
      #  - where the IP address is known based on the file name with ssh_*

      # It is expected that the logs are in the default subdirectory of the folder cobaltstrike: /cobaltstrike/logs/
      grok {
        match => { "[log][file][path]" => [
          "/cobaltstrike/logs/((\d{6}))/unknown/(beacon|ssh)_(?<[implant][id]>(\d{1,10}))",
          "/cobaltstrike/logs/((\d{6}))/%{IPORHOST:[host][ip_int]}/beacon_(?<[implant][id]>(\d{1,10}))",
          "/cobaltstrike/logs/((\d{6}))/%{IPORHOST:[host][ip_int]}/ssh_(?<[implant][id]>(\d{1,10}))"
        ] }
      }

      # matching lines like: [metadata] 1.2.3.4 <- 10.10.10.10; computer: SomeComputername; user: SomeUsername; pid: 7368; os: Windows; version: 6.1; beacon arch: x86
      # todo: this could go wrong if targetip is not an ip but a smb/TCP beacon (can list the beacon session id instead of ip address..? In such case also set the beacon_link value to true
      if "[metadata] " in [c2][message] {
        mutate {
          replace  => { "[c2][log][type]" => "implant_newimplant" }
        }
        # need to match 3 types of lines:
        #  - regular HTTP(S) beacon where the ext IP field is an IP
        #  - SMB/TCP beacons where the ext IP field is a field like "beacon_12345"
        #  - SSH beacons
        grok {
          match => { "[c2][message]" => [
            "[metadata](([^\s]*)) %{IPORHOST:[host][ip_ext]} (([^\s]*)) %{IPORHOST}((\; computer:)) (?<[host][name]>([^\;]*))((\; user:)) (?<[user][name]>([^\;]*))((\; process:)) (?<[process][name]>([^\;]*))((\; pid:)) (?<[process][pid]>([^\;]*))((\; os:)) (?<[host][os][name]>([^\;]*))((\; version:)) (?<[host][os][version]>([^\;]*))(((\; build:)) (?<[host][os][kernel]>([^\;]*)))?((\; beacon arch:)) (?<[implant][arch]>([^\;]*))",
            "[metadata](([^\s]*)) beacon_%{NUMBER:[implant][parent_id]} (([^\s]*)) %{IPORHOST}((\; computer:)) (?<[host][name]>([^\;]*))((\; user:)) (?<[user][name]>([^\;]*))((\; process:)) (?<[process][name]>([^\;]*))((\; pid:)) (?<[process][pid]>([^\;]*))((\; os:)) (?<[host][os][name]>([^\;]*))((\; version:)) (?<[host][os][version]>([^\;]*))(((\; build:)) (?<[host][os][kernel]>([^\;]*)))?((\; beacon arch:)) (?<[implant][arch]>([^\;]*))",
            "[metadata](([^\s]*)) beacon_%{NUMBER:[implant][parent_id]} (([^\s]*)) %{IPORHOST}((\; computer:)) (?<[host][name]>([^\;]*))((\; user:)) (?<[user][name]>([^\;]*))((\; os:)) (?<[host][os][name]>([^\;]*))"
          ]}
        }

        # Now duplicate fileds host.ip_ext and host.ip_int to host.ip to adhere to ECS.
        if [host][ip_int] {
	        mutate {
           add_field  => { "[host][ip]" => "%{[host][ip_int]}" }
	        }
	      }
        if [host][ip_ext] {
          mutate {
            add_field => {
              "[host][domain_ext]" => "%{[host][ip_ext]}"
              "[host][ip]" => "%{[host][ip_ext]}"
            }
          }
          # do reverse DNS lookup
          dns {
            reverse => ["[host][domain_ext]"]
            action => "replace"
            timeout => "2.0"
          }
          # add geo ip info from City DB
          geoip {
            source => "[host][ip_ext]"
            target => "tmpgeoip"
          }
          # add geo ip info from ASN DB
          geoip {
            source => "[host][ip_ext]"
            target => "tmpgeoip"
            default_database_type => "ASN"
            database => "/usr/share/elasticsearch/modules/ingest-geoip/GeoLite2-ASN.mmdb"
          }
          mutate {
            copy => {
              "[tmpgeoip][as_org]" => "[host][geo][as][organization][name]"
              "[tmpgeoip][asn]" => "[host][geo][as][organization][number]"
              "[tmpgeoip][city_name]" => "[host][geo][city_name]"
              "[tmpgeoip][country_code2]" => "[host][geo][country_iso_code]"
              "[tmpgeoip][location]" => "[host][geo][location]"
              "[tmpgeoip][region_code]" => "[host][geo][region_iso_code]"
              "[tmpgeoip][region_name]" => "[host][geo][region_name]"
            }
            remove_field => [ "tmpgeoip" ]
          }
        }

        # now duplicate this specific log line, remove some irrelevant fields and make it ready to store in the implantsdb index (different output)
        clone {
          clones => [ "implantsdb" ]
          remove_field => [ "[c2][log][type]","[c2][message]","[infra][log_type]" ]
        }
        # Now set beacon link information if its a linked beacon.
        if [implant][parent_id] {
            mutate {
              add_field => { "[implant][linked]" => "true" }
              add_field => { "[implant][link_mode]" => "child" }
            }
        }

      }

      # matching lines like: [task] Tasked beacon to sleep for 3600s (20% jitter)
      if "[task] " in [c2][message] {
        mutate {
          replace  => { "[c2][log][type]" => "implant_task" }
        }

        grok {
          match => { "[c2][message]" => "(([^\s]*)) %{GREEDYDATA:[implant][task]}" }
        }

        # Since Cobalt Strike v3.14 the task log line contains MITRE ATT&CK numbers of the task that is about to be performed.
        # Example: [task] <T1113, T1093> Tasked beacon to take screenshot
        # Here we check if '<T' and '>' are in c2.message. If so, we parse the field. If not, we assume its an old CS version and skip the creation of the ATT&CK Technique field.
        # We also check if there are multiple values, and if so split them up
        if "<T" in [implant][task] and ">" in [implant][task] {
          grok {
            match => { "[implant][task]" => "<(?<[threat][technique][id]>([^\>]*))> " }
          }
          mutate {
            split => { "[threat][technique][id]" => ", " }
          }
        }
      }

      # matching lines like: [checkin] host called home, sent: 16 bytes
      if "[checkin] " in [c2][message] {
        mutate {
          replace  => { "[c2][log][type]" => "implant_checkin" }
        }

        grok {
          match => { "[c2][message]" => "(([^\s]*)) %{GREEDYDATA:[implant][checkin]}" }
        }
      }

      # matching lines like: [input] <Operator> note s3600 20
      if "[input] " in [c2][message] {
        mutate {
          replace  => { "[c2][log][type]" => "implant_input" }
        }

        grok {
          match => { "[c2][message]" => "(([^\s]*)) (<%{GREEDYDATA:[implant][operator]}>)? %{GREEDYDATA:[implant][input]}" }
        }
      }

      # matching lines like: [indicator] SomethingSomething
      if "[indicator]" in [c2][message] {
        mutate {
          replace => { "[c2][log][type]" => "ioc" }
        }

        # need to match 2 types of lines: one for file and one for service indicators
        grok {
          match => { "[c2][message]" => [
            "((^\[indicator\])) (?<[ioc][type]>([^\:]*))((:)) %{NOTSPACE:[file][hash][md5]} %{POSINT:[file][size]} ((bytes)) %{GREEDYDATA:[file][name]}",
            "((^\[indicator\])) (?<[ioc][type]>([^\:]*))((:)) %{WINPATH:[file][path]} %{NOTSPACE:[file][name]}"
          ]}
        }
      }

      # matching lines like: [output]\nSomethingSomething
      if "[output]" in [c2][message] {
        mutate {
          replace  => { "[c2][log][type]" => "implant_output" }
        }

        grok {
          match => { "[c2][message]" => "]\n%{GREEDYDATA:[implant][output]}" }
        }

        # check for messages like: established link to parent beacon: 1.2.3.4
        # todo: add check for recursive smb/TCP beacons (child becomes another beacon's parent). For now this parent-child indication is wrong when a child becomes a parent of another linked beacon
        # Done: using parent_id or child_id depending on the relation (beacon can have a parent and a child). Note that a parent beacon can have multiple child beacons, which only the latest will be registered.
        if "established link to parent beacon" in [implant][output] {
          grok {
            match => { "[implant][output]" => "((established link to parent beacon: ))%{IPORHOST:[implant][parent_id]}" }
            add_field => { "[implant][linked]" => "true" }
            # add_field => { "[implant][link_mode]" => "child" }
          }
        }
        if "established link to child beacon" in [implant][output] {
          grok {
            match => { "[implant][output]" => "((established link to child beacon: ))%{IPORHOST:[implant][child_id]}" }
            add_field => { "[implant][linked]" => "true" }
            # add_field => { "[implant][link_mode]" => "child" }
          }
        }

        # check for received screenshots and add a path value to the screenshot
        if "received screenshot (" in [implant][output] {
          ruby {
            path => "/etc/logstash/ruby-scripts/cs_makescreenshotpath.rb"
          }
        }
      }

      # matching lines like: [error]\nSomethingSomething
      if "[error]" in [c2][message] {
        mutate {
          replace  => { "[c2][log][type]" => "implant_error" }
        }

        grok {
          match => { "[c2][message]" => "]%{GREEDYDATA:[implant][output]}" }
        }
      }

    }

    if [c2][log][type] == "keystrokes" {
      # Get the timestamp from the log line, and get the rest of the log line
      # Since CS version 3.14 the logging changed to include the UTC keyword
      if " UTC " not in [message] {  # check for legacy CS version, will be removed in the future
        grok {
          match => { "message" => "(?<[c2][timestamp]>%{MONTHNUM}\/%{MONTHDAY} %{TIME}) %{GREEDYDATA:[c2][message]}" }
        }
        # Set the timestamp from the log to @timestamp
        date {
          match => [ "[c2][timestamp]", "MM/dd HH:mm:ss" ]
          target => "@timestamp"
          timezone => "Etc/UTC"
        }
      } else {  # check for newer version of CS, contains "UTC" in time logging lines
        grok {
          match => { "message" => "(?<[c2][timestamp]>%{MONTHNUM}\/%{MONTHDAY} %{TIME}) UTC %{GREEDYDATA:[c2][message]}" }
        }
        # Set the timestamp from the log to @timestamp
        date {
          match => [ "[c2][timestamp]", "MM/dd HH:mm:ss" ]
          target => "@timestamp"
          timezone => "Etc/UTC"
        }
      }

      # Set the beacon id from the file name
      # Need to match for 2 different occurence, one where the IP address is known based on the file name, and one where it states 'unknown'.
      # It is expected that the logs are in the default subdirectory of the folder cobaltstrike: /cobaltstrike/logs/
      grok {
        match => { "[log][file][path]" => [
          "/cobaltstrike/logs/((\d{6}))/unknown/keystrokes/keystrokes_(?<[implant][id]>(\d{0,10}))",
          "/cobaltstrike/logs/((\d{6}))/%{IPORHOST:[host][ip_int]}/keystrokes/keystrokes_(?<[implant][id]>(\d{1,10}))"
        ]}
      }

      # add url to full keystrokes file
      ruby {
        path => "/etc/logstash/ruby-scripts/cs_makekeystrokespath.rb"
      }
    }

    if [c2][log][type] == "downloads" {
      if " UTC " not in [message] {  # check for legacy CS version, will be removed in the future
        # Matching lines like: #1546505606424    10.202.1.11    12654    7    /root/cobaltstrike/downloads/9ce6fbfb1    testdoc.txt    C:\Users\Administrator\Desktop\
        grok {
          # TODO: the large int is a timestamp (in ms)
          # This type of log does not have a regular timestamp, but it does have a large int at the beginning. Lets throw that away as we have no use for it now.
          match => { "message" => "%{WORD}(\t)%{GREEDYDATA:[c2][message]}" }
        }
        grok {
          match => { "[c2][message]" => "%{IP:[host][ip_int]}(\t)(?<[implant][id]>(\d{0,10}))(\t)%{INT}(\t)%{NOTSPACE:[file][directory_local]}(\t)(?<[file][name]>([^\t]*))(\t)%{GREEDYDATA:[file][directory]}" }
        }
      } else {  # check for newer version of CS, contains "UTC" in time logging lines
        # matching lines like: 05/25 13:29:44 UTC      192.168.217.131 93439   70      /root/cobaltstrike/downloads/2914cdfa8  helloworld.ps1  C:\users\marcs\Desktop\
        grok {
          match => { "message" => "(?<[c2][timestamp]>%{MONTHNUM}\/%{MONTHDAY} %{HOUR}\:%{MINUTE}\:%{SECOND}) UTC(\t)%{GREEDYDATA:[c2][message]}" }
        }
        grok {
          match => { "[c2][message]" => "%{IP:[host][ip_int]}(\t)(?<[implant][id]>(\d{0,10}))(\t)%{INT}(\t)%{NOTSPACE:[file][directory_local]}(\t)(?<[file][name]>([^\t]*))(\t)%{GREEDYDATA:[file][directory]}" }
        }
        # Set the timestamp from the log to @timestamp
        date {
          match => [ "[c2][timestamp]", "MM/dd HH:mm:ss" ]
          target => "@timestamp"
          timezone => "Etc/UTC"
        }
      } # end of legacy CS version check

      # add url to full keystrokes file
      ruby {
        path => "/etc/logstash/ruby-scripts/cs_makedownloadspath.rb"
      }
    }

    if [c2][log][type] == "credentials" {
      # Drop the first line with headers
      if "#User" in [message] {
        drop { }
      }

      #Parse the lines with credentials
      grok {
        match => { "message" => "(?<[creds][realm]>([^\\]*))\\(?<[creds][username]>([^\t]*))\t(?<[creds][credential]>([^\t]*))\t(?<[creds][host]>([^\t]*))\t(?<[creds][source]>([^\t]*))"  }
      }
    }

    if [c2][log][type] == "listeners" {
      # Drop the first line with headers
      if "Listener name" in [message] {
        drop { }
      }

      #Parse the lines with listeners
      grok {
        match => { "message" => "(?<[c2][listener][name]>([^\t]*))\t(?<[c2][listener][host]>([^\t]*))\t(?<[c2][listener][port]>([^\t]*))\t(?<[c2][listener][domains]>([^\t]*))\t(?<[c2][listener][type]>([^\t]*))\t?(?<[c2][listener][bind_port]>([^\t]*))\t?(?<[c2][listener][profile]>([^\t]*))\t?(?<[c2][listener][proxy]>([^\t]*))" }
      }
      #Split the domains if multiple exists
      mutate {
        split => { "[c2][listener][domains]" => ", " }
      }


      #Clone the event to add it as an IOC if it has a domain configured (i.e. http or dns listeners)
      if [c2][listener][domains] {
        clone {
          clones => [ "ioc_domains" ]
        }
      }
      #Clone the event to add it as an IOC if it has a host configured (i.e. http or dns stagers)
      if [c2][listener][host] and [type] != "ioc_domains" {
        clone {
          clones => [ "ioc_host" ]
        }
      }

      #Set the IOC fields depending on the type of domain (c2 or staging)
      if [type] == "ioc_domains" {
        mutate {
          replace => {
            "[c2][log][type]" => "ioc"
          }
          add_field => {
            "[ioc][type]" => "domain"
            "[ioc][domain]" => "%{[c2][listener][domains]}"
          }
        }
      }
      if [type] == "ioc_host" {
        mutate {
          replace => {
            "[c2][log][type]" => "ioc"
          }
          add_field => {
            "[ioc][type]" => "domain"
            "[ioc][domain]" => "%{[c2][listener][host]}"
          }
        }
      }
    }

    if [c2][log][type] {
      # TODO: move to enrich.py
      # if ![host][os][kernel] and [c2][log][type] != "credentials" and [c2][log][type] != "events" and [c2][log][type] != "implant_newimplant" {
      #   # enrich the beacon data using the retrieved implant_id
      #   elasticsearch {
      #     hosts => "https://localhost:9200"
      #     index => "implantsdb"
      #     query => "implant.id:%{[implant][id]}"
      #     fields => {
      #       "host.name" => "host.name"
      #       "host.ip" => "host.ip"
      #       "host.os.family" => "host.os.family"
      #       "host.os.version" => "host.os.version"
      #       "host.os.kernel" => "host.os.kernel"
      #       "process.pid" => "process.pid"
      #       "user.name" => "user.name"
      #     }
      #     result_size => 1
      #     enable_sort => false
      #     user => ["redelk_ingest"]
      #     password => ["{{ es_redelk_ingest_password }}"]
      #     ca_file => "/etc/logstash/redelkCA.crt"
      #     tag_on_failure => ["_elasticsearch_lookup_failure_implantsdb"]
      #   }
      # }

      # Add data about OS for nice display
      if [host][os][kernel] and [c2][log][type] != "credentials" {
        mutate {
          add_field => {
            "[host][os][family]" => "%{[host][os][name]}"
            "[host][os][platform]" => "%{[host][os][name]}"
            "[host][os][full]" => "%{[host][os][family]} %{[host][os][version]} (build %{[host][os][kernel]})"
          }
        }
      }


      # Add metadata for SIEM
      mutate {
        add_field => {
          "[event][kind]" => "event"
          "[event][category]" => "host"
          "[event][module]" => "redelk"
          "[event][dataset]" => "c2"
          "[event][action]" => "%{[c2][log][type]}"
        }
        copy => {
          "[c2][log][type]" => "[event][type]"
        }
      }
    }

  }
}
